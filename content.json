[{"title":"Python 学习笔记","date":"2017-04-20T10:10:15.565Z","path":"2017/04/20/python-learning/","text":"Python是用来编写应用程序的高级编程语言。举例：基本输入/输出： print()在括号中加上字符串，就可以向屏幕上输出指定的文字。 input()可以让你显示一个字符串来提示用户（‘name=input(please enter your name:)’） Python基础数据类型和变量 数据类型：整数、浮点数、字符串、布尔值、空值 变量：不仅可以是数字，还可以是任意数据类型。 常量：在Python中，通常用全部大写的变量名表示常量。 字符串和编码 备注：Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言。 Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符 以Unicode表示的str通过encode()方法可以编码为指定的bytes。 如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需用decode()方法。 要计算str包含多少个字符，可以用len()函数 在Python中，采用的格式化方式和C语言是一致的，用%实现，常见的占位符有：%d 整数 %f 浮点数 %s 字符串 %x 十六进制整数 使用list和tupleList 含义： 举例：classmates = [‘Michael’, ‘Bob’, ‘Tracy’]。 list里面的元素的数据类型也可以不同。 list元素也可以是另一个list。 常用函数： 用len()函数可以获得list元素的个数。 如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：classmates[-1]。 往list中追加元素到末尾：classmates.append(‘Adam’)。 把元素插入到指定的位置：classmates.insert(1, ‘Jack’)。 删除list末尾的元素：classmates.pop()。 要删除指定位置的元素：classmates.pop(i)。 要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：classmates[1] = ‘Sarah’。 Tuple 含义： 有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改。 Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。 Tuple中包含的list列表元素的值可以变。 条件判断if语句的完整形式就是：if &lt;条件判断1&gt;: &lt;执行1&gt;elif &lt;条件判断2&gt;: &lt;执行2&gt;elif &lt;条件判断3&gt;: &lt;执行3&gt;else: &lt;执行4&gt; 循环for…in循环举例：names = [‘Michael’, ‘Bob’, ‘Tracy’]for name in names: print(name)小技巧：range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：list(range(5))输出[0, 1, 2, 3, 4] while循环举例：sum = 0n = 99while n &gt; 0: sum = sum + n n = n - 2print(sum) 使用dict和set前提：对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回 dict 含义： 在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度,dict是用空间来换取时间的一种方法。。示例：d = {‘Michael’: 95, ‘Bob’: 75, ‘Tracy’: 85} 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉 方法： 避免key不存在的错误，有两种办法，一是通过in判断key是否存在【’Thomas’ in d】；二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value。 要删除一个key，用pop(key)方法，对应的value也会从dict中删除。 Set 含义： 是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key. 要创建一个set，需要提供一个list作为输入集合【s = set([1, 2, 3])】. 传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的,重复元素在set中自动被过滤。 set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作,举例：s1 = set([1, 2, 3])s2 = set([2, 3, 4])s1 &amp; s2{2, 3}s1 | s2{1, 2, 3, 4} 方法： 通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果【s.add(4)】 通过remove(key)方法可以删除元素【s.remove(4)】 函数函数就是最基本的一种代码抽象的方式 调用函数举例：绝对值的函数abs（）、最大值函数max()、int()函数可以把其他数据类型转换为整数；函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名” 定义函数 定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。举例：def my_abs(x): if x &gt;= 0:return x else:return -x 如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名） 空函数，定义一个什么事也不做的空函数，可以用pass语句（pass可以用来作为占位符）：def nop(): pass 函数的参数位置参数power(x)函数，参数x就是一个位置参数 默认参数power(x, n=2)【必须是必选参数在前，默认参数在后】【有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数】 可变参数举例： def calc(numbers): sum = 0 for n in numbers: sum = sum + n n return sum 定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：【calc(1, 2)、calc()】。 *nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。 关键字参数关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict ============================================================== 函数参数小结： Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。 默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！ 要注意定义可变参数和关键字参数的语法： *args是可变参数，args接收的是一个tuple； **kw是关键字参数，kw接收的是一个dict。 以及调用函数时如何传入可变参数和关键字参数的语法： 可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过args传入：func((1, 2, 3))； 关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过kw传入：func({‘a’: 1, ‘b’: 2})。 使用args和*kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。 命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。 定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。 ================================================================== ###递归函数","tags":[]},{"title":"仅仅是个测试页2","date":"2017-04-20T09:01:23.556Z","path":"2017/04/20/test3/","text":"I need more space to learning program test!","tags":[]},{"title":"仅仅是个测试页","date":"2017-04-20T08:59:50.988Z","path":"2017/04/20/text2/","text":"nothing to say","tags":[]},{"title":"MARKDOWN语法笔记","date":"2017-04-14T02:30:02.232Z","path":"2017/04/14/text/","text":"多看，多练，多学习！ 注释（Comment） 注释是写作者自己的标注记录，不被浏览器解析渲染。HTML 以 结尾的闭包定义注释（支持跨行），不在正文中显示。Markdown 沿用 HTML Comment 注释格式： 标题（Header）1Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 1 类 Setext 形式是用底线的形式，使用三个或以上连续 =（equal signs）底线标记最高阶标题，使用三个或以上连续 -（dashes）底线 标记第二阶标题。例如： equal signs for first-level headers: This is an H1 dashes for second-level headers: This is an H2 2 类 Atx 形式则是在行首插入 1 到 6 个 # （hash character），对应 6 阶标题（对应 HTML 中的 ‘‘- ‘‘ 标签）。例如： 这是一级标题（H1，通常用于文档标题）这是二级标题（H2，有些渲染器会为二级标题添加 hr 底线）这是三级标题（H3）这是四级标题（H4）这是五级标题（H5）这是六级标题（H6） 句段（Sentence / Paragraph） 换行 标准 Markdown 不支持自然换行（literal new line），有些渲染器扩展支持自然换行。 ‘#’号标识的 Heading（H1-H6） 会自然换行，普通句段之间若要强制换行（Manual Line Break），可以在自然换行行尾追加两个（或以上）空格来实现。 分段 段落是由一个或多个连续的文本行组成，它的前后往往需要空行予以明示分隔。 空行适用场景说明： 空行的上一句末无需再添加两个空格或 &lt;br/&gt; 换行了。 句段之间引入空行，相当于间隔成段落（对应 HTML 的 &lt;p&gt; 标签）。 尽管 Markdown Render 会对各阶 Heading（H1-H6）有特殊的格式渲染来凸显层级，但还是建议在章节（Section/Chapter）末尾适时插入空行，以示行文分割且方便阅读。 为了更优的 阅读感 和 兼容性，建议在分割线（Horizontal Rules）的上面留一空行，块引用（Blockquote）、预格式化（Preformatted Code Block）、列表（List）、表格（Table）等区块元素的上下各插入空行。 符号 转义字符 Markdown 精挑细选了一些符号组成了一套基于文本的标记语法。比如： 在文字两旁加上 * 号，看起来就像*强调*。 多行行首添加 +（或 - 或 *），看起来就是列表。 句段行首添加 &gt; 号来引用区块，就像你曾在电子邮件中见过的那样。 可以使用反斜杠（\\，backslash）转义输入 Markdown 标记符号的原义字符。 #：行首的 #（此处使用 kbd 闭包显示按键字幕）号默认为H1，这里使用反斜杠转义显示原义字符。 =================================================================================== 字符实体 在 Markdown 中，空格和 tab 往往用于格式控制，例如： 行首插入 tab 或 四个空格 缩进表示 &lt;pre&gt; 预格式化； 引用、列表的 bullet 标记符前的 tab 或 空格 用于缩进嵌套层级； 普通段落一般都是顶格开始，无法使用 空格 或 tab 来缩进，包括引用标记符（&gt;）、列表标记符（bullet list indicator）后面的空格都无法实现缩进。 如果硬要输入空格显示占位缩进效果，可以嵌入空格对应的 HTML Entity 实体码。HTML 转义字符串（Escape Sequence），即字符实体（Character Entity）。字符实体由三部分构成： 第一部分是一个 &amp; （ampersand）符号； 第二部分是实体（Entity）名字；或者 # 加上实体编号（Entity Code）； 第三部分是一个分号 ; （semicolon）。 HTML提供了5种空格实体（space entity），它们拥有不同的宽度，非断行空格（&amp;nbsp;）是常规空格的宽度，可运行于所有主流浏览器。其他几种空格（ &amp;ensp;、&amp;emsp;、&amp;thinsp;、&amp;zwnj;、&amp;zwj;）在不同浏览器中宽度各异。 entity code full-name width &amp;nbsp; &amp;#160; no-break space 键盘空格（space bar） &amp;ensp; &amp;#8194; en space 半角空格（half-width） &amp;emsp; &amp;#8195; em space 全角空格（full-width） 1. 在HTML中，使用&amp;nbsp;产生的空格是不会累加的（只算1个）；要使用html实体表示才可累加。 2. &amp;ensp;中的en是字体排印学的计量单位，为em宽度的一半，名义上是小写字母n的宽度。此空格传承空格家族一贯的特性：透明的！此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。 3. &amp;emsp;中的em是字体排印学的计量单位，相当于当前指定的点数。此空格也传承空格家族一贯的特性：透明的！此空格也有个相当稳健的特性，就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。 普通自然行行首敲2个空格无占位缩进效果。 该行行首添加了4个&amp;nbsp;。 该行行首添加了4个&ensp;。 该行行首添加了4个&emsp;。分隔线你可以在一行中用三个以上的星号（asterisks：*）或减号（hyphens：-）或底线（underscores：_）来建立一个水平分隔线，对应 HTML 中的 标签，用于Sentence/Section/Page Break。行内不能有其他东西，但你可以在星号或是减号中间插入空格。下面每种写法都可以建立起分隔线： - - -注意： 采用减号（-）分割时，最好空格隔开或上面空一行，不然三个以上连续的减号会误将上一行文字升级为二级标题！文本格式文本格式包括强调、加粗、突出、下划线、删除线、脚标等增强修饰和丰富表现。 强调 说明： 星号（*）或下划线（_）包围的文字将会显示斜体，对应 HTML 中的 / 标签。 语法： Some of these words are emphasized.Some of these words are emphasized also. GFM（Github Flavored Markdown）建议： 鉴于C语言等源码中，通常采用下划线定义变量，因此 GFM 忽略单词内的下划线，同时建议使用星号（*）来包裹斜体。 下划线闭包单词斜体：wow great stuff (源码：wow great stuff)GFM 忽略单词内的下划线：wow_great_stuff 加粗 说明： 两个星号（**）或下划线（__）包围的需要特别强调的文字将会加粗显示，对应 HTML 中的 / 标签。 语法： Use two asterisks for strong emphasis.Or, if you prefer, use two underscores instead.A section surrounded with three asterisks will be specially emphasized. 突出（Mark/Highlight） 说明：在 HTML 中，可以使用 标签来高亮显示文字，以达到醒目的目的。标准 markdown 没有提供对应的标签支持，Macdown 和 Haroopad 均使用两个等号（equal signs：=）包围来突出高亮显示。 语法：Macdown 和 Haroopad：==Highlight==CriticMarkup语法：{==Highlight==} 下划线（Underline） 说明：在 HTML 中，可以使用 标签来为文本添加下划线。标准 markdown 没有提供对应的标签支持，MMD（MultiMarkdown）提供了扩展支持。Macdown 使用星号表示强调，使用下划线表示下划线原义；Haroopad 则使用两个加号（plus sign：+）来标记下划线。 语法：Macdown：underlineHaroopad：++underline++ 删除线（Strikethrough） 说明：在 HTML 中，可以使用 标签来定义文档中已被删除的文本（配合 标签来描述文档中的更新和修正）。标准 markdown 没有提供对应的标签支持，GFM 提供了扩展支持，使用两个波浪符号（two wavy line:~~）包围来给文本添加删除线。 语法： Strikethrough 脚标（Script） 标准 Markdown 不支持脚标，只能通过内嵌 HTML 的和标签来实现。 上脚标： Haroopad 语法（Caret）：^Superscript^HTML 语法：superscript 下脚标： Haroopad 语法：~Subscript~HTML 语法：subscript 链接（Hyperlink） 自动链接（Autolink） 当我们在书写一个网址时，有些 Markdown Render 能自动生成标题（title）与网址（href URL）一致的链接，这种链接也即自动链接。Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要用尖括号包起来的文字， Markdown 就会自动识别转化成链接。对于 HTTP(s) 协议开头的超链接地址，甚至无需添加尖括号明示，也会生成自动链接。 http://daringfireball.net/projects/markdown/ 文字（text href） Markdown 支持两种形式的超文本链接语法格式： 行内式（Inline）和参考式（Reference）两种形式。不管是哪一种，链接文字都是用方括号（square brackets：[]）来标记。 行内式（Inline） 只要在方块括号后面紧接着圆括号（parenthesis or round brackets）并插入链接网址即可在一行内构建链接，其语法格式为text，HTML 等效源码为 text。如果是要链接到本机资源，可以使用相对路径（./path/to/your/resource）。 以下定义了一个指向 Daring Fireball Markdown 首页的超链接： Daring Fireball MarkdownDaring Fireball Markdown 如果你还想要加上链接的 title ，只要在网址后面用双引号把 title 文字包起来即可。 Daring Fireball MarkdownDaring Fireball Markdown 当鼠标悬停在超链接文本上时，将会提示 “Markdown Official Website”。 参考式（Reference） 参考式的链接是在链接文字的括号后面再接上另一个方括号，在第二个方括号里面填入用以辨识链接的标记id，然后在其他地方给出该标记id真正的链接地址。 先定义参考refid：[text][refid]再定义refid所指：[refid]:URL以下参考间接定义指向 Daring Fireball Markdown 首页的超链接： 先定义参考id为markdown_homepage_refid：Daring Fireball Markdown再在其他地方定义markdown_homepage_refid指向的URL： 最终效果同行内式：Daring Fireball Markdown说明： 也可选择性地在两个方括号中间加上一个空格：[text] [refid]。由于 Markdown 不支持自然换行，将两个方括号在连续两行书写也是没问题的。中间用空行隔开，则被认为是两条精简格式的参考链接。refid 可以与 text 一致，从而进一步精简参考链接的书写格式：此时 [refid] 中的 refid 可以省略置空为 [] ：先定义 [text][] ，再定义 [text]:URL 。你甚至可以将 [text][] 中的空中括号也省掉不写，进一步简写为 [text] ，后面再定义 [text]:URL 。refid 所指 href URL 在文件任意处给出定义即可。[refid]:URL 的 URL 后面可以选择性地用单引号、双引号或是括弧闭包起来标记 title。下面这三种链接的定义都是相同的： foo: http://example.com/ ‘Optional Title Here’ 图片（image href） 插入图片 Markdown 使用一种和文本链接很相似的语法来插入图片，同样也允许两种样式： 行内式和参考式。不同的是，需要在链接文字方括号之前添加一个感叹号（exclamation mark：!），其语法格式为 ，HTML 等效源码为 ，其中alt_text可以置空。 daringfirefall logo:daringfirefall 当然，你也可以像文字链接那样添加 title 以供鼠标悬停提示。 说明：Markdown 中的段落（包括图片）默认顶格左对齐，若要将图片居中，可以直接内嵌 HTML 的 标签，设置align=”middle”。如果还不行，可以尝试封裹一层 div 设置 style=”text-align:center” 实现： 11程序猿-弦苦图片链接 如果拷贝了别人的图片插入到自己的博客中，最好在图片上给出一个超链接指向源头，方便追溯出处。我们在 Markdown 图片标记外面再嵌套一层即可建立图片超链接，点击图片即可跳转到链接源地址。图片链接的格式看起来大概是这样的: 定义 haroopad logo 指向首页： 锚点（inner link） 书签（Bookmark） HTML 中的 标签最重要的属性是 href ，它指示的链接目标，既可以是外部站点，也可以是页内锚点。页内锚点可以实现类似书签跳转的功能，最典型的就是点击 TOC 中的目录书签跳转到指定章节阅读。构建页内锚点的语法，类似参考式链接： 先定义锚点id：bookmark_text再定义一个id为auchor_id的对象（这里以为例）：auchor_text例如，我们在文末定义了id为end的 EOF（End Of File）：The end！，然后通过Goto the End!指定书签“Goto the End!”跳转到文末“The End!”处： Goto the End! 脚注（Footnote） 上面我们定义了书签 Goto the End! ，点击该书签将跳转到文末 id 为 #end 的锚点，使得我们能快速翻到文末。那怎么再跳转回刚才书签所在的阅读点呢？下面来介绍一下具备回环跳转效果的脚注。 脚注用于为正文中的某个条目添加补充注释，对词条的引文出处进行标注或对专业术语予以解释，跟参考文献一样。脚注一般位于文档的末尾，文内则以数字标注。 脚注的写法和极简参考式链接书写格式比较类似： 先在需要脚注的单词（terminology）后面添加 [^Footnote] ： terminology[^Footnote]再在文末 glossary 区域定义脚注（添加注解）： [^Footnote]：explanatory notes以下是本文针对第二章标题 “标题（Header）”的着色添加的脚注： 标题（Header）[^Header][^Header]:这里的源码为&lt;font color=&#39;red&#39;&gt;标题（Header）&lt;/font&gt;，尝试使用 font.color 着色。123123说明： 被添加脚注的词条后面会出现一个超链接数字（有的渲染为上标格式），点击数字跳转到文末 glossary 区域该脚注的定义处。文末 glossary 区域该脚注定义的行尾会添加一个回车符号（↵），点击可回到被标注的脚注点。引用（Blockquote） HTML 中的 标签定义摘自另一个源的块引用。 与 之间的所有文本都会从常规文本中分离出来，经常会在左右两边进行缩进，而且有时会使用斜体。也就是说，块引用拥有它们自己的空间。本文大量使用引用（复合列表）来标识特殊说明或注意事项。 Markdown 标记区块引用是使用类似 email 的引用方式，在断好的行前加上 &gt; （more than or greater than sign）： 爱上一个人恋上一座城1212爱上一个人恋上一座城行首的多重引用标记可以实现嵌套缩进效果（注意解梦时需要空行出梦）： 梦 梦中梦 盗梦空间 梦中梦 梦12345671234567梦 梦中梦 盗梦空间梦中梦梦说明： 若使用引用格式插入代码，行首的缩进格式丢失，需要自行补充空格占位符。一般不建议使用 blockquote（&gt;）格式引用源代码，应采用 pre 格式引用代码。嵌套深入浅出时，需要添加空行（blank line）或者空引用行（additional levels of &gt;）。代码（Code） 如果要标记行内代码片段，可以用反引号（backtick quotes）闭包；如果要插入跨行片段或块，可使用预格式化语法。本文在示范 Markdown 语法源码时，独行单句采用了行内代码格式，跨行代码片段则采用了代码块格式。 行内代码（Inline Code） 说明： 如果要标记行内代码片段，可以用反引号（backtick quotes）包裹，对应 HTML 中的 标签（把文本变成等宽字体，暗示是源程序代码）。如果要在代码区段内插入反引号，可以用多个反引号来开启和结束代码区段。 语法： Use the printf() function.(此处使用了反斜杠转义) 示例： Use the printf() function.(printf())Use theprintf()function.(“ printf() “`) 代码块（Code Blocks） 说明： Preformatted Code Block如果要插入跨行片段或块，且要保持排版样式（包括空格、换行符和缩进），可使用预格式化引用语法格式。对应 HTML 中的 标签。Fenced Code Block如果要支持编程语言语法高亮，则可以使用 GFM 扩展的基于 YAML2 标记语言的 Fenced Code Block 引用语法格式。语法： Preformatted Code Block在句段的行首插入1个tab 或 4个空格，则表示代码块。[Fenced Code Block]在句段行首和行末用三个反引号换行闭包，并在行首三个反引号后添加 YAML 语言标识。language aliasesMarkdown 无别名，注意区分大小写HTML xhtmlJavaScript js、nodeC 无别名，注意区分大小写C++ cppObjective-C obj-c、objc、objectivecVimL vim、nvim示例： 1.Preformatted Code Block 将一段代码块整体向右缩进（⌘ + ]）即可测试。 （1）以tab开头： these lines begin with tab will be shown as pre code block.these lines begin with tab will be shown as pre code block.these lines begin with tab will be shown as pre code block.（2）以4个空格开头： these lines begin with 4 spaces will also be shown as pre code block.these lines begin with 4 spaces will also be shown as pre code block.these lines begin with 4 spaces will also be shown as pre code block.注意： pre 格式存在以下缺陷： 对多tab及空格的缩进支持不完善！将宏符号#（#include、#import）误解为H1，可能会影响解析器的TOC！将顶格空白行（包括行首带tab）误认为Paragraph Break，而割断代码块成片段！2.Fenced Code Block Fenced Code Block 以三个反引号（backtick quotes：`，有的支持波浪线~）包裹，第一行的三个反引号之后可以冠上编程语言的 YAML 标记识别语法高亮。 以下演示插入一句 python 代码：首行（三个反引号开头）：“Python 中间：print(‘Hello world!’) 末行（三个反引号结尾）：“print(‘Hello world!’)11以下演示插入一段 Objective-C 代码：首行：“obj-c 中间：Objective-C Code Block 末行：“//// main.m// EmptyApplication//// Created by faner on 15/9/5.// Copyright © 2015年 faner. All rights reserved.// #import #import “AppDelegate.h” int main(int argc, char * argv[]) { @autoreleasepool { return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); }}1234567891011121314151612345678910111213141516注意： Haroopad 编辑器将上述代码中的#import的第一个有效字符#误解为 H1，导致 TOC 错乱或 Heading Focus Folding 失效。此时，可尝试在 Fenced Code Block 行首添加空格或 tab 缩进。关于 GitHub 配置 Fenced Code Block 语法高亮所使用的 YAML 标记 ，可参考 初探YAML、YAML学习、YAML学习总结、YAML–想要爱你很容易。列表（List） GFM 等 Markdown 扩展支持和无序列表、有序列表和任务列表。 无序列表（Unordered List） 无序列表（unordered, bulleted）项目的行首使用星号（或加号，或减号）加空格作为列表标记（list markers）： bullet list item 1 begin with a hyphens ‘-‘ bullet list item 2 begin with a pluses ‘+’ bullet list item 3 begin with an asterisks ‘*’123123示例效果： bullet list item 1 begin with a ‘-‘bullet list item 2 begin with a ‘+’bullet list item 3 begin with a ‘*’通过在列表标记前面增加 tab 阶次来实现嵌套效果（nested list）。以下是针对本文 TOC 中【链接】这一章节的目录： 链接（Hyperlink） 自动链接（Autolink） 文字（text href） 行内式（Inline） 参考式（Reference） 图片（image href） 插入图片 图片链接 锚点（inner link） 书签（Bookmark） 脚注（Footnote） 引用（Blockquote）123456789101112123456789101112链接（Hyperlink）自动链接（Autolink）文字（text href）行内式（Inline）参考式（Reference）图片（image href）插入图片图片链接锚点（inner link）书签（Bookmark）脚注（Footnote）引用（Blockquote）缩进控制符：空格 or TAB？ 在列表标记前面插入空格也可以实现缩进控制嵌套效果，但不同的 Markdown Render 对控制层级的空格个数要求不一。为了取得最佳的兼容性，建议使用 tab 来控制嵌套层级（nested hierarchy），以期在不同的渲染引擎下都能达到预期的显示效果。当然，前提是使用 hard tabs（tab characters），而非 soft tabs（spaces）。有序列表（Ordered List） 有序列表（ordered / numbered）项目的行首则使用数字接一个英文句点标记（use numbers followed by periods）： GETTING STARTED Choosing Blogging Platform (WordPress) GETTING YOUR BLOG ONLINE Choosing Domain Name &amp; Web Hosting DESIGNING AND TWEAKING YOUR BLOG Quick and easy ways to get your blog look the way you want WRITING BLOG POSTS AND PAGES Adding new content for your Blog (Posts, Pages, Images etc…)1234567812345678Step-by-step walkthrough for starting a blog: GETTING STARTEDChoosing Blogging Platform (WordPress)GETTING YOUR BLOG ONLINEChoosing Domain Name &amp; Web HostingDESIGNING AND TWEAKING YOUR BLOGQuick and easy ways to get your blog look the way you wantWRITING BLOG POSTS AND PAGESAdding new content for your Blog (Posts, Pages, Images etc…)有序列表和无序列表可以实现混合嵌套编排。 任务列表（Task Lit） GFM 扩展支持把列表变成带勾选框的任务列表，只需要在列表标记后添加[ ]标记☐表示unchecked，在中括号中填写x（[x]）标记☑︎表示checked（filled）。 [ ] task1 to do [x] task2 done [ ] task3 to do [x] task4 done12341234[ ] task1 to do[x] task2 done[ ] task3 to do[x] task4 done表格（Table） You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe | (vertical bar): First Header Second HeaderContent Cell Content CellContent Cell Content CellFor aesthetic purposes, you can also add extra pipes on the ends: First Header Second HeaderContent Cell Content CellContent Cell Content CellNote that the dashes at the top don’t need to match the length of the header text exactly: Name DescriptionHelp Display the help window.Close Closes a windowYou can also include inline Markdown such as links, bold, italics, or strikethrough: Name DescriptionHelp Display the help window.Close Closes a windowFinally, by including colons : within the header row, you can define text to be left-aligned, right-aligned, or center-aligned: Left-Aligned Center Aligned Right Alignedcol 3 is some wordy text $1600col 2 is centered $12zebra stripes are neat $1A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. 数学公式 You can render LaTeX3 mathematical expressions using MathJax4, as on math.stackexchange.com:The Gamma function satisfying Γ(n)=(n−1)!∀n∈N is via the Euler integral Γ(z)=∫∞0tz−1e−tdt.书写一个质能守恒公式 E=mc2可参考 Mathjax与LaTex公式简介。 The end！ 这里的源码为标题（Header），尝试使用 font.color 着色。 ↩YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递归缩写，早先YAML的意思其实是：”Yet Another Markup Language”（另外一种置标语言）。 ↩LaTeX是一种基于 ΤΕΧ的排版系统，它通过\\section和\\paragraph等语句，规定了每一句话在文章中所从属的层次，从而极大方便了对各个层次批量处理。可参考 TeX 与 LaTeX、LaTeX 入门文档 和 LaTeX 入门教程。 ↩MatchJax 是一个JavaScript引擎，用来显示网络上的数学公式。MathJax可以解析Latex、MathML和ASCIIMathML的标记语言。 ↩","tags":[]},{"title":"Hello World","date":"2017-04-13T10:27:24.503Z","path":"2017/04/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]